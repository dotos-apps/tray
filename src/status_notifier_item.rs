// This code was autogenerated with `dbus-codegen-rust -d :1.65 -p /org/ayatana/NotificationItem/blueman -m None`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusProperties {
    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusProperties for blocking::Proxy<'a, C> {

    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface_name, property_name, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>, )| Ok(r.0, ))
    }

    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface_name, ))
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface_name, property_name, value, ))
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusPeer for blocking::Proxy<'a, C> {

    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgKdeStatusNotifierItem {
    fn scroll(&self, delta: i32, orientation: &str) -> Result<(), dbus::Error>;
    fn secondary_activate(&self, x_: i32, y_: i32) -> Result<(), dbus::Error>;
    fn xayatana_secondary_activate(&self, timestamp: u32) -> Result<(), dbus::Error>;
    fn id(&self) -> Result<String, dbus::Error>;
    fn category(&self) -> Result<String, dbus::Error>;
    fn status(&self) -> Result<String, dbus::Error>;
    fn icon_name(&self) -> Result<String, dbus::Error>;
    fn icon_accessible_desc(&self) -> Result<String, dbus::Error>;
    fn attention_icon_name(&self) -> Result<String, dbus::Error>;
    fn attention_accessible_desc(&self) -> Result<String, dbus::Error>;
    fn title(&self) -> Result<String, dbus::Error>;
    fn icon_theme_path(&self) -> Result<String, dbus::Error>;
    fn menu(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn xayatana_label(&self) -> Result<String, dbus::Error>;
    fn xayatana_label_guide(&self) -> Result<String, dbus::Error>;
    fn xayatana_ordering_index(&self) -> Result<u32, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgKdeStatusNotifierItem for blocking::Proxy<'a, C> {

    fn scroll(&self, delta: i32, orientation: &str) -> Result<(), dbus::Error> {
        self.method_call("org.kde.StatusNotifierItem", "Scroll", (delta, orientation, ))
    }

    fn secondary_activate(&self, x_: i32, y_: i32) -> Result<(), dbus::Error> {
        self.method_call("org.kde.StatusNotifierItem", "SecondaryActivate", (x_, y_, ))
    }

    fn xayatana_secondary_activate(&self, timestamp: u32) -> Result<(), dbus::Error> {
        self.method_call("org.kde.StatusNotifierItem", "XAyatanaSecondaryActivate", (timestamp, ))
    }

    fn id(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "Id")
    }

    fn category(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "Category")
    }

    fn status(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "Status")
    }

    fn icon_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "IconName")
    }

    fn icon_accessible_desc(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "IconAccessibleDesc")
    }

    fn attention_icon_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "AttentionIconName")
    }

    fn attention_accessible_desc(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "AttentionAccessibleDesc")
    }

    fn title(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "Title")
    }

    fn icon_theme_path(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "IconThemePath")
    }

    fn menu(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "Menu")
    }

    fn xayatana_label(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "XAyatanaLabel")
    }

    fn xayatana_label_guide(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "XAyatanaLabelGuide")
    }

    fn xayatana_ordering_index(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.kde.StatusNotifierItem", "XAyatanaOrderingIndex")
    }
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierItemNewIcon {
}

impl arg::AppendAll for OrgKdeStatusNotifierItemNewIcon {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierItemNewIcon {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierItemNewIcon {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierItemNewIcon {
    const NAME: &'static str = "NewIcon";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierItemNewIconThemePath {
    pub icon_theme_path: String,
}

impl arg::AppendAll for OrgKdeStatusNotifierItemNewIconThemePath {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.icon_theme_path, i);
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierItemNewIconThemePath {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierItemNewIconThemePath {
            icon_theme_path: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierItemNewIconThemePath {
    const NAME: &'static str = "NewIconThemePath";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierItemNewAttentionIcon {
}

impl arg::AppendAll for OrgKdeStatusNotifierItemNewAttentionIcon {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierItemNewAttentionIcon {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierItemNewAttentionIcon {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierItemNewAttentionIcon {
    const NAME: &'static str = "NewAttentionIcon";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierItemNewStatus {
    pub status: String,
}

impl arg::AppendAll for OrgKdeStatusNotifierItemNewStatus {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.status, i);
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierItemNewStatus {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierItemNewStatus {
            status: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierItemNewStatus {
    const NAME: &'static str = "NewStatus";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierItemXAyatanaNewLabel {
    pub label: String,
    pub guide: String,
}

impl arg::AppendAll for OrgKdeStatusNotifierItemXAyatanaNewLabel {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.label, i);
        arg::RefArg::append(&self.guide, i);
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierItemXAyatanaNewLabel {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierItemXAyatanaNewLabel {
            label: i.read()?,
            guide: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierItemXAyatanaNewLabel {
    const NAME: &'static str = "XAyatanaNewLabel";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierItemNewTitle {
}

impl arg::AppendAll for OrgKdeStatusNotifierItemNewTitle {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierItemNewTitle {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierItemNewTitle {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierItemNewTitle {
    const NAME: &'static str = "NewTitle";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}
